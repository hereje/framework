#!/usr/bin/env bash
set -e
. "$JL_WORKDIR/common"

cli_help() {
  echo "
Command: install

Use: This command will set your project, login to doppler, install dependencies, run docker and other configuration options.

Options (optional):
  sync: This will sync secrets, docker etc rather than installing from scratch

Example: JL install
Example: JL install sync
"
exit 1
}

check_domains(){

	if [ -z "$PROJECT_DOMAINS" ]
	then
		cli_log "No domains needed for this project"
	else

		cli_log "Checking domains"
		INDEX=0
		for i in ${PROJECT_DOMAINS//,/ }
    	do
        	if ping -c 1 "$i" &> /dev/null
        	    then
            		cli_log "$i is up"
            	else
              		cli_log "Creating $i in hosts file"
              		write_to_file "other" "127.0.0.1       $i" "/etc/hosts"
              		write_to_file "other" "::1             $i" "/etc/hosts"
                fi

                if [ -z "$PROJECT_SSL" ]
                then
                	cli_log "No SSL needed for this project"
				else
            		cli_log "Creating local certs for $i"
            		IFS=', ' read -r -a SSL <<< "$PROJECT_SSL"
                	current_dir=$PWD;cd $PWD${SSL[$INDEX]};mkcert $i;cd $current_dir;
        		fi

        	INDEX=$INDEX+1
        done
	fi

}

cli_log "INSTALL"

SYNC=0

if [ "$1" ]
then
	case "$1" in
	 sync|d)
         SYNC=1 ;;
     *|d)
       cli_help ;;
    esac
fi

if [ -z "$JL_DOPPLER" ]
then
	CHANGED=1
	echo "Does this project run Doppler? [y/n] [n]"

    read DOPPLER
    DOPPLER="${DOPPLER:=n}"
    if [ "DOPPLER" = "y" ]; then
      DOPPLER=1
    else
      DOPPLER=0
    fi

 if [ -z "$JL_DOPPLER" ]
    then
            	write_to_file "global" "JL_DOPPLER=$DOPPLER"
            else
            	update_file "global" "JL_DOPPLER" "$DOPPLER"
            fi


    cli_log "Doppler config: $DOPPLER"
    echo ""
fi



if [ -z "$JL_DOPPLER" ]
then
	cli_log "No doppler secrets needed for this project"
else

	if [ $SYNC -eq 0 ]
	then
		cli_log "Setup Secrets"
		doppler login
		doppler setup --no-interactive
	fi

	cli_log "Fetch latest secrets"
	doppler secrets --json > secrets.json
    jq -r 'to_entries|map("\(.key)=\(.value.computed|tostring)")|.[]' secrets.json > .env
    rm -rf secrets.json
    export $(grep -v '^#' .env)
    cli_log "Secrets Installed"

fi

if [ -f "$JL_WORKDIR/package.json" ]
then
	npm install
fi


CHANGED=0

if [ -z "$PROJECT_NAME" ]
then
	CHANGED=1
	echo "Provide the project name (used for the github project board, docker container name & other things): [Framework]"
    read NAME
    echo -e "\nPROJECT_NAME=$NAME" >> $env
    cli_log "Project Name: $NAME"
    echo ""
fi

#if [ -z "$JL_USER_ID" ]
#then
#	CHANGED=1
#	echo "What is your JuicyLlama User ID number?"
#    read USER_ID
#    if [ -z "$JL_USER_ID" ]
#    then
#    	write_to_file "local" "JL_USER_ID=$USER_ID"
#    else
#    	update_file "local" "JL_USER_ID" "$USER_ID"
#    fi
#
#    cli_log "User ID: $USER_ID"
#    echo ""
#fi

if [ -z "$JL_PROJECT_ID" ]
then
	CHANGED=1
	echo "What is the client project id (0 for framework / non-client projects)? [0] "
	read PROJECT_ID
	if [ -z "$JL_PROJECT_ID" ]
	then
        	write_to_file "global" "JL_PROJECT_ID=$PROJECT_ID"
        else
        	update_file "global" "JL_PROJECT_ID" "$PROJECT_ID"
        fi

	cli_log "Project ID: $PROJECT_ID"
	echo ""
fi

if [ -z "$GITHUB_PROJECT_BOARD_ID" ]
then
	CHANGED=1
	echo "What is the github project board id? [1]"
	read PROJECT_BOARD_ID
	if [ -z "$GITHUB_PROJECT_BOARD_ID" ]
	then
        	write_to_file "global" "GITHUB_PROJECT_BOARD_ID=$PROJECT_BOARD_ID"
        else
        	update_file "global" "GITHUB_PROJECT_BOARD_ID" "$PROJECT_BOARD_ID"
        fi



	cli_log "Github Project Board ID: $PROJECT_BOARD_ID"
	echo ""
fi

cli_log_error "TODO:  LINK github project node ID for future usage"

check_domains

if [ -z "$JL_DOCKER" ]
then
	CHANGED=1
	echo "Does this project run Docker? [y/n] [n]"

    read DOCKER
    DOCKER="${DOCKER:=n}"
    if [ "$DOCKER" = "y" ]; then
      DOCKER=1
    else
      DOCKER=0
    fi

    if [ -z "$JL_DOCKER" ]
    then
            	write_to_file "global" "JL_DOCKER=$DOCKER"
            else
            	update_file "global" "JL_DOCKER" "$DOCKER"
            fi


    cli_log "Docker: $DOCKER"
    echo ""
fi

set_working_brand_to_main

if [ $CHANGED -eq 1 ]; then
	cli_log "Config saved."
else
	cli_log "No config needed, you can always edit the settings via the .env file."
fi

if [ "$JL_DOCKER" ] && [ "$JL_DOCKER" -eq 1 ]; then
	if [ $SYNC -eq 0 ]
    	then
    	 	cli_log "Installing docker containers"
         	docker-compose --project-name "$PROJECT_NAME" up --build --detach
    elif [ $SYNC -eq 1 ]
	then
		cli_log "Skipping building docker containers"
    fi
fi



cli_log_error "TODO:  If there is no package.json, build by asking questions about project type e.g. nest, quasar etc"

cli_log "END"